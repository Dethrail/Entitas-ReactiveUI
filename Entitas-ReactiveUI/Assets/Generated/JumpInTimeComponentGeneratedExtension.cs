//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        public JumpInTimeComponent jumpInTime { get { return (JumpInTimeComponent)GetComponent(ComponentIds.JumpInTime); } }

        public bool hasJumpInTime { get { return HasComponent(ComponentIds.JumpInTime); } }

        public Entity AddJumpInTime(long newTargetTick) {
            var component = CreateComponent<JumpInTimeComponent>(ComponentIds.JumpInTime);
            component.targetTick = newTargetTick;
            return AddComponent(ComponentIds.JumpInTime, component);
        }

        public Entity ReplaceJumpInTime(long newTargetTick) {
            var component = CreateComponent<JumpInTimeComponent>(ComponentIds.JumpInTime);
            component.targetTick = newTargetTick;
            ReplaceComponent(ComponentIds.JumpInTime, component);
            return this;
        }

        public Entity RemoveJumpInTime() {
            return RemoveComponent(ComponentIds.JumpInTime);
        }
    }

    public partial class Pool {
        public Entity jumpInTimeEntity { get { return GetGroup(Matcher.JumpInTime).GetSingleEntity(); } }

        public JumpInTimeComponent jumpInTime { get { return jumpInTimeEntity.jumpInTime; } }

        public bool hasJumpInTime { get { return jumpInTimeEntity != null; } }

        public Entity SetJumpInTime(long newTargetTick) {
            if (hasJumpInTime) {
                throw new EntitasException("Could not set jumpInTime!\n" + this + " already has an entity with JumpInTimeComponent!",
                    "You should check if the pool already has a jumpInTimeEntity before setting it or use pool.ReplaceJumpInTime().");
            }
            var entity = CreateEntity();
            entity.AddJumpInTime(newTargetTick);
            return entity;
        }

        public Entity ReplaceJumpInTime(long newTargetTick) {
            var entity = jumpInTimeEntity;
            if (entity == null) {
                entity = SetJumpInTime(newTargetTick);
            } else {
                entity.ReplaceJumpInTime(newTargetTick);
            }

            return entity;
        }

        public void RemoveJumpInTime() {
            DestroyEntity(jumpInTimeEntity);
        }
    }

    public partial class Matcher {
        static IMatcher _matcherJumpInTime;

        public static IMatcher JumpInTime {
            get {
                if (_matcherJumpInTime == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.JumpInTime);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherJumpInTime = matcher;
                }

                return _matcherJumpInTime;
            }
        }
    }
}
